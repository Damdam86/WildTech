if 'transformer' not in globals():
    from mage_ai.data_preparation.decorators import transformer
if 'test' not in globals():
    from mage_ai.data_preparation.decorators import test


@transformer
def cleaning(df_viva, df_bpi, df_maddy, df_mina, df_CESFR, df_siren, df_tech):
    """
    Transforme les noms de colonnes et retourne les DataFrames sous forme de dictionnaire.
    """
    #Renomage de la colonne name en nom
    df_bpi = df_bpi.rename(columns={'name': 'nom'})
    df_bpi = df_bpi.rename(columns={'hashtags': 'mots_cles_b'})
    df_bpi = df_bpi.rename(columns={'website': 'site_web'})

    df_CESFR = df_CESFR.rename(columns={'Nom': 'nom'})
    df_CESFR = df_CESFR.rename(columns={'Description': 'description'})
    df_CESFR = df_CESFR.rename(columns={'Catégories': 'mots_cles_y'})
    df_CESFR = df_CESFR.rename(columns={'Website': 'site_web_z'})
    df_CESFR = df_CESFR.rename(columns={'Adresse': 'adresse_z'})
    df_CESFR = df_CESFR.rename(columns={'Logo': 'logo'})


    df_maddy = df_maddy.rename(columns={'Nom': 'nom'})
    df_maddy = df_maddy.rename(columns={'Description': 'description'})
    df_maddy = df_maddy.rename(columns={'Site internet': 'site_web'})
    df_maddy = df_maddy.rename(columns={'Logo': 'logo'})
    df_maddy = df_maddy.rename(columns={'Hashtags': 'mots_cles_z'})

    df_mina = df_mina.rename(columns={'name': 'nom'})
    df_mina = df_mina.rename(columns={'Logo': 'logo'})

    df_viva = df_viva.rename(columns={'name': 'nom'})
    df_viva = df_viva.rename(columns={'website': 'site_web_u'})
    df_viva = df_viva.rename(columns={'Logo': 'logo'})

    #Suppression colonne
    df_tech.drop(columns=['social_links'], inplace=True)
    df_bpi.drop(columns=['total_funding'], inplace=True)

    df_CESFR.drop(columns=['Lien'], inplace=True)

    df_maddy.drop(columns=['Siège'], inplace=True)
    df_maddy.drop(columns=['Date de création'], inplace=True)

    df_mina.drop(columns=['url'], inplace=True)
    df_mina.drop(columns=["Date d'adhésion"], inplace=True)
    df_mina.drop(columns=["contact"], inplace=True)
    df_mina.drop(columns=["infos"], inplace=True)

    df_viva.drop(columns=["link"], inplace=True)
    df_viva.drop(columns=["looking_for"], inplace=True)
    df_viva.drop(columns=["development_level"], inplace=True)

    df_siren.drop(columns=["État administratif"], inplace=True)
    df_siren.drop(columns=["Catégorie entreprise"], inplace=True)
    df_siren.drop(columns=["Denomination usuelle"], inplace=True)

    # Convertir les colonnes 'nom' en majuscules
    df_bpi['nom'] = df_bpi['nom'].str.upper()
    df_tech['nom'] = df_tech['nom'].str.upper()
    df_maddy['nom'] = df_maddy['nom'].str.upper()
    df_CESFR['nom'] = df_CESFR['nom'].str.upper()
    df_mina['nom'] = df_mina['nom'].str.upper()
    df_viva['nom'] = df_viva['nom'].str.upper()

    # Fusion des 3 DataFrames sur la colonne 'nom'

    # Fusion df_bpi et df_tech
    merged_df = pd.merge(df_bpi, df_tech, on=['nom','description','logo'], how='outer')

    # Fusion de la merge avec df_maddy
    merged_df = pd.merge(merged_df, df_maddy, on=['nom','description','logo'], how='outer')

    # Fusion de la merge avec df_maddy
    merged_df = pd.merge(merged_df, df_CESFR, on=['nom','description','logo'], how='outer')

    # Fusion de la merge avec df_mina
    merged_df = pd.merge(merged_df, df_mina, on=['nom','description','logo'], how='outer')

    # Fusion de la merge avec df_viva
    merged_df = pd.merge(merged_df, df_viva, on=['nom','description','logo'], how='outer')

    # Fusion de la merge avec df_viva
    merged_df = pd.merge(merged_df, df_siren, on=['nom'], how='outer')


    #remplissage des bonnes colonnes
    merged_df['site_web_x'].fillna(merged_df['site_web_y'], inplace=True)
    merged_df['site_web_x'].fillna(merged_df['site_web_z'], inplace=True)
    merged_df['site_web_x'].fillna(merged_df['site_web'], inplace=True)
    merged_df['site_web_x'].fillna(merged_df['site_web_u'], inplace=True)

    merged_df['mots_cles_b'].fillna(merged_df['mots_cles'], inplace=True)
    merged_df['mots_cles_b'].fillna(merged_df['mots_cles_z'], inplace=True)
    merged_df['mots_cles_b'].fillna(merged_df['mots_cles_y'], inplace=True)
    merged_df['mots_cles_b'].fillna(merged_df['mots_cles_a'], inplace=True)

    merged_df['mots_cles_u'] = merged_df['Field_1'].fillna('') + ' ' + merged_df['Field_2'].fillna('') + ' ' + merged_df['Field_3'].fillna('')
    merged_df['mots_cles_b'].fillna(merged_df['mots_cles_u'], inplace=True)

    merged_df['adresse_z'].fillna(merged_df['city_x'], inplace=True)
    merged_df['adresse_z'].fillna(merged_df['city_y'], inplace=True)
    merged_df['adresse_z'].fillna(merged_df['Adresse'], inplace=True)

    merged_df['Date de création_x'].fillna(merged_df['Date de création_y'], inplace=True)

    merged_df['Montant'].fillna(merged_df['fundraising'], inplace=True)


    #Suppression des colonnes
    merged_df.drop(columns=['site_web_y'], inplace=True)
    merged_df.drop(columns=['site_web_z'], inplace=True)
    merged_df.drop(columns=['site_web'], inplace=True)
    merged_df.drop(columns=['site_web_u'], inplace=True)


    merged_df.drop(columns=['mots_cles'], inplace=True)
    merged_df.drop(columns=['mots_cles_z'], inplace=True)
    merged_df.drop(columns=['mots_cles_y'], inplace=True)
    merged_df.drop(columns=['mots_cles_a'], inplace=True)
    merged_df.drop(columns=['mots_cles_u'], inplace=True)
    merged_df.drop(columns=['Field_1'], inplace=True)
    merged_df.drop(columns=['Field_2'], inplace=True)
    merged_df.drop(columns=['Field_3'], inplace=True)

    merged_df.drop(columns=['city_x'], inplace=True)
    merged_df.drop(columns=['city_y'], inplace=True)
    merged_df.drop(columns=['Adresse'], inplace=True)
    merged_df.drop(columns=['Date de création_y'], inplace=True)
    merged_df.drop(columns=['emplacement'], inplace=True)

    merged_df.drop(columns=['fundraising'], inplace=True)

    