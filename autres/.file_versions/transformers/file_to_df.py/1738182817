import pandas as pd
import logging

if 'transformer' not in globals():
    from mage_ai.data_preparation.decorators import transformer
if 'test' not in globals():
    from mage_ai.data_preparation.decorators import test

logger = logging.getLogger(__name__)  # Logger pour afficher les logs Mage.ai

@transformer
def file_to_df(*data, **kwargs):
    """
    Transforme et retourne les 7 fichiers sous forme de tuple contenant 7 DataFrames.
    """
    logger.info(f"🚀 file_to_df a reçu {len(data)} éléments.")

    # Vérifie que l'on reçoit bien 7 fichiers
    expected_files = [
        'bpifrance_startups_data2.json',
        'tech_fest_data.json',
        'entreprises_data - maddyness.json',
        'exposantsFRCES2025.csv',
        'societes_minalogic.csv',
        'partners_viva_tech.csv',
        'enriched_company_data.csv'
    ]

    if len(data) != 7:
        logger.warning(f"⚠️ Nombre de fichiers reçus incorrect : {len(data)} / 7")
        return tuple()  # Retourne un tuple vide en cas d'erreur

    cleaned_data = []
    for i, df in enumerate(data):
        if isinstance(df, pd.DataFrame):
            logger.info(f"✅ DataFrame {i} chargé : {expected_files[i]} - {df.shape}")
            cleaned_data.append(df)
        else:
            logger.warning(f"⚠️ Erreur : {expected_files[i]} n'est pas un DataFrame ! Type: {type(df)}")
            cleaned_data.append(pd.DataFrame())  # Remplace par un DataFrame vide

    output = tuple(cleaned_data)  # Convertir en tuple

    logger.info(f"✅ file_to_df retourne un tuple de {len(output)} éléments.")
    return output  # S'assurer qu'on retourne bien un tuple

@test
def test_output(output, *args) -> None:
    """
    Vérifie que l'output est un tuple contenant 7 DataFrames valides.
    """
    assert output is not None, "⚠️ L'output est vide."
    assert isinstance(output, tuple), f"⚠️ L'output doit être un tuple. Type reçu: {type(output)}"
    assert len(output) == 7, f"⚠️ L'output doit contenir 7 DataFrames, mais il en contient {len(output)}."

    for i, df in enumerate(output):
        assert isinstance(df, pd.DataFrame), f"⚠️ L'élément {i} n'est pas un DataFrame. Type: {type(df)}"
        logger.info(f"✅ DataFrame {i} vérifié: {df.shape}")

    logger.info("🎉 TOUS LES TESTS SONT PASSÉS AVEC SUCCÈS !")
