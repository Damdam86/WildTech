if 'transformer' not in globals():
    from mage_ai.data_preparation.decorators import transformer
if 'test' not in globals():
    from mage_ai.data_preparation.decorators import test
    import ast

@transformer
def transform(data, *args, **kwargs):
    """
    Template code for a transformer block.

    Add more parameters to this function if this block has multiple parent blocks.
    There should be one parameter for each output variable from each parent block.

    Args:
        data: The output from the upstream parent block
        args: The output from any additional upstream blocks (if applicable)

    Returns:
        Anything (e.g. data frame, dictionary, array, int, str, etc.)
    """
    # DÃ©balage des colonnes
    """
    Transforme les donnÃ©es importÃ©es depuis S3.

    Args:
        data: DataFrame reÃ§u du bloc prÃ©cÃ©dent (peut Ãªtre un seul ou plusieurs DataFrames)

    Returns:
        Un ou plusieurs DataFrames transformÃ©s
    """
    
    # VÃ©rifier si data contient plusieurs DataFrames
    if isinstance(data, tuple):  # Plusieurs sources
        df_bpi, df_tech, df_maddy, df_CESFR, df_mina, df_viva, df_siren = data
    else:  # Une seule source
        df_siren = data  # Exemple si une seule source
    
    # ðŸŽ¯ Place ici tes transformations sur les DataFrames
    # Exemple : Afficher les 5 premiÃ¨res lignes de chaque DataFrame
    print("BPI France :\n", df_bpi.head())
    print("Tech Fest :\n", df_tech.head())
    print("Maddyness :\n", df_maddy.head())
    print("CES FR :\n", df_CESFR.head())
    print("Minalogic :\n", df_mina.head())
    print("Viva Tech :\n", df_viva.head())
    print("SIREN Enriched :\n", df_siren.head())

    return df_bpi, df_tech, df_maddy, df_CESFR, df_mina, df_viva, df_siren

    return df_bpi, df_tech, df_maddy, df_CESFR, df_mina, df_viva, df_siren


@test
def test_output(output, *args) -> None:
    """
    Template code for testing the output of the block.
    """
    assert output is not None, 'The output is undefined'
